from code_crafters_core.AvadaKedavra import shutdown_with_countdown
from code_crafters_core.FileSorting import executing_command
from prompt_toolkit.application.current import get_app
from code_crafters_core.RecordData import bcolors
from code_crafters_core.AddressBook import *
from code_crafters_core.NoteFeature import *
from prompt_toolkit import PromptSession
from prompt_toolkit.styles import Style
from pathlib import Path
from code_crafters_core.Languages import *
import threading
import asyncio
import random


def pre_run() -> None:
    app = get_app()
    b = app.current_buffer
    if b.complete_state:
        b.complete_next()
    else:
        b.start_completion(select_first=False)

def choose_language() -> str:
    while True:
        language = input(f"{bcolors.BOLD}üè≥Ô∏è  Please choose a language (en/ru/ua): {bcolors.RESET}")
        if language in ("en", "ru", 'ua'):
            return language
        else:
            print(f"{bcolors.WARNING}üôÉ Wrong language format entered!{bcolors.RESET}\n{bcolors.BLUE}Please enter en | ru or ua to choose language:{bcolors.RESET}")

def one_command_vizualization(user_input: str, lists: Tuple[list, list]) -> str:
    if user_input:
        for com_list, ex_com in zip(lists[0], lists[1]):  
            if com_list.__contains__(user_input):
                return f"{com_list} {ex_com}"
    return ""

def available_commands(command: Optional[str] = None) -> Union[Tuple[list, list], str]:

    if language == "en":
        english_all_available_commands = EnglishAllAvailableCommands()
        command_list = english_all_available_commands.gets_all_available_commands()
        command_description = english_all_available_commands.gets_all_available_commands_description()

    elif language == "ru":
        russian_all_available_commands = RussianAllAvailableCommands()
        command_list = russian_all_available_commands.gets_all_available_commands()
        command_description = russian_all_available_commands.gets_all_available_commands_description()
      
    elif language == "ua":
        ukrainian_all_available_commands = UkrainianAllAvailableCommands()
        command_list = ukrainian_all_available_commands.gets_all_available_commands()
        command_description = ukrainian_all_available_commands.gets_all_available_commands_description()

    if command:
        return (command_list, command_description)

    return "".join(
        "|{:<10} - {:<20}|\n".format(command_list[item], command_description[item])
        for item in range(len(command_list))
    )

async def get_input() -> str:
    global exit_flag
    if language == "ru":
        commands_prompts = RussianCommandsPrompts()
        commands_prompts = commands_prompts.gets_commands_prompts()        
        commands_explain = RussianCommandsList()
        commands_list = commands_explain.gets_commands_list()
        print(f"{bcolors.PINK}ü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –Ω–µ–º–Ω–æ–≥–æ —è—Ä—á–µ!\nüåû –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è. –í–º–µ—Å—Ç–µ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üéâüéà{bcolors.RESET}")
    elif language == "en":
        commands_prompts = EnglishCommandsPrompts()
        commands_prompts = commands_prompts.gets_commands_prompts()       
        commands_explain = EnglishCommandsList()
        commands_list = commands_explain.gets_commands_list()
        print(f"{bcolors.PINK}ü§ñ I'm here to make your day a little brighter!\nüåû Feel free to ask questions or just communicate. Together we can make this day unforgettable!{bcolors.RESET}")
    elif language == "ua" :
        commands_prompts = UkrainianCommandsPrompts()
        commands_prompts = commands_prompts.gets_commands_prompts()       
        commands_explain = UkrainianCommandsList()
        commands_list = commands_explain.gets_commands_list()
        print(f"{bcolors.PINK}ü§ñ –Ø —Ç—É—Ç, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à –¥–µ–Ω—å —Ç—Ä–æ—Ö–∏ —è—Å–∫—Ä–∞–≤—ñ—à–∏–º!\nüåû –ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Å—Ç–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è. –†–∞–∑–æ–º –º–∏ –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–º!{bcolors.RESET}")   
    try:
        session = PromptSession()
        result = await session.prompt_async(
            random.choice(commands_prompts),
            completer=commands_list,
            pre_run=pre_run,
            style=Style.from_dict({"prompt": "bg:#ansigreen #ffffff"}),
        )
        timer_thread.cancel()
        return result
    except KeyboardInterrupt:
        print(f"\n{bcolors.FAIL}‚ùå KeyBoard interrupt error, EXITING‚ùó{bcolors.RESET}\n")
        save_to_file_contacts(file_name, book)
        save_to_file_notes(note_name, note)
        exit_flag = True       
    except RuntimeError:
        pass

def timer_function() -> None:
    print(f"\n{bcolors.WARNING}‚è∞ Time's up! You didn't enter any commandüíÄ {bcolors.RESET}")
    print(f"{bcolors.WARNING}üòÑ I'm offended, you're not using me, so I run the Awadakedabra command and I shut down you forever!üíÄ {bcolors.RESET}")
    shutdown_with_countdown()

def wait_for_input(timeout: int = 120, timeout2: int = 1000) -> Optional[str]:
    loop = asyncio.get_event_loop()
    result = None
    global timer_thread

    async def wait_input():
        nonlocal result
        result = await get_input()
        
    timer_thread = threading.Timer(timeout2, timer_function)
    timer_thread.start()

    try:
        loop.run_until_complete(asyncio.wait_for(wait_input(), timeout=timeout))
    except asyncio.TimeoutError:
        print(f"{bcolors.ORANGE}\n‚è∞: You are here, I'm waiting for your command{bcolors.RESET}")
    
    return result

def deserialize(file_path: Path, class_instance: Type[Union[AddressBook, NoteBook]], read_from_file_func: Callable[..., Union[AddressBook, NoteBook]]) -> Union[AddressBook, NoteBook]:
    if file_path.exists() and file_path.is_file():
        with open(file_path, "rb") as fh:
            check_content = fh.read()

        if not check_content:
            instance = class_instance()
        else:
            instance = read_from_file_func(file_path)
            
    else:
        with open(file_path, "wb"):
            pass
        instance = class_instance()
        
    return instance

def save_to_file_contacts(file_path: Path, instance) -> None:
    serialization = AddressBook()
    serialization.save_to_file(file_path, instance)
    
def save_to_file_notes(file_path: Path, instance) -> None:
    serialization = NoteBook()
    serialization.note_save_to_file(file_path, instance)
    
def main():  
    global exit_flag
    global file_name
    global note_name
    global book
    global note
    global language
 
    file_name = "database.bin"
    note_name = "notebase.bin"
    
    file_database = Path(file_name)
    note_database = Path(note_name)  

    book = deserialize(file_database, AddressBook, AddressBook.read_from_file)
    note = deserialize(note_database, NoteBook, NoteBook.note_read_from_file)
    
    console_interface = ConsoleInterface()
    console_interface_note = ConsoleInterfaceNote()
     
    try:
        print(f"{bcolors.PINK}üëã Hello! My name is Bot Jul. Please choose the language and we will begin ü§ñ {bcolors.RESET}")
        language = choose_language()
        exit_flag = False
        while True:
            user_input = wait_for_input()
            print(one_command_vizualization(user_input, available_commands(user_input)))
            match user_input:
                case "cli" | "–∫–æ–º–∞–Ω–¥—ã" | "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ":
                    print(available_commands())
                
                case "change language" | "–∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" | "–∑–º—ñ—Ç–∏ –º–æ–≤—É":
                    language = choose_language()

                case "contact add" | "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞" | "–¥–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç":
                    # '–∑–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–º–µ–Ω–µ–º, –∞–¥—Ä–µ—Å–æ–º, –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email —Ç–∞ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ –∫–Ω–∏–≥–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤'
                    book.add_contacts()

                case "contact find" | "–ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞" | "–ø–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞":
                    # '–∑–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É —Å–µ—Ä–µ–¥ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–Ω–∏–≥–∏'
                    console_interface.search_contact(book)

                case "contact show all" | "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã" | "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏":
                    # "–ø–æ–∫–∞–∑—É—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤ –∫–Ω–∏–∑—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"
                    console_interface.show_all_contacts(book)

                case "contact phone add" | "–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" | "–¥–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω":
                    # "–¥–æ–¥–∞—Ç–∏ —ñ—â–µ 1-–∏–Ω phone –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"
                    book.add_phone()

                case "contact phone remove" | "—É–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" | "–≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω":
                    # "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ phone",
                    book.remove_phone()

                case "contact email add" | "–¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É" | "–¥–æ–¥–∞—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É":
                    # "–¥–æ–¥–∞—Ç–∏ —ñ—â–µ 1-–∏–Ω email –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"
                    book.add_email()

                case "contact email remove" | "—É–¥–∞–ª–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É" | "–≤–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É":
                    # "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ email",
                    book.remove_email()

                case "contact phone edit" | "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" | "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω":
                    # "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è phone —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"
                    book.edit_phone()

                case "contact email edit" | "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É" | "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É":
                    # '—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è email —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É'
                    book.edit_email()

                case "contact birthday edit" | "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" | "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
                    # '—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è birthday —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É'
                    book.edit_birthday()

                case "contact remove" | "—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" | "–≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç":
                    # "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"
                    book.del_contact()

                case "display birthdays" | "–ø–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è" | "–ø–æ–∫–∞–∑–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è":
                    # "–≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤, —É —è–∫–∏—Ö –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏"
                    book.show_contacts_birthdays()

                case "note add" | "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É" | "–¥–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É":
                    # "–∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ —ñ–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞",
                    note.add_new_note()

                case "note find" | "–Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É" | "–∑–Ω–∞–π—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É":
                    # "–∑–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏ —Å–µ—Ä–µ–¥ —ñ—Å–Ω—É—é—á–∏—Ö –Ω–æ—Ç–∞—Ç–∫—ñ–≤"
                    console_interface_note.find_author(note)

                case "note show all" | "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏" | "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏":
                    # "–ø–æ–∫–∞–∑—É—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –Ω–æ—Ç–∞—Ç–∫–∏"
                    console_interface_note.note_show_all(note)

                case "note edit" | "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É" | "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É":
                    # "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏"
                    note.note_edit()

                case "note remove" | "—É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É" | "–≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É":
                    # "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏"
                    note.note_remove()

                case "tag add" | "–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥" | "–¥–æ–¥–∞—Ç–∏ —Ç–µ–≥":
                    #  "–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏"
                    note.tag_add()

                case "tag edit" | "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥" | "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–≥":
                    #  "—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–≥—ñ–≤ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏"
                    note.tag_edit()

                case "tag remove" | "—É–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏ –∏–∑ –∑–∞–º–µ—Ç–∫–∏" | "–≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–≥":
                    #  "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–≥—ñ–≤ –∑ —ñ—Å–Ω—É—é—á–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏"
                    note.tag_remove()

                case "tag find sort" | "–Ω–∞–π—Ç–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–≥–∞–º" | "–∑–Ω–∞–π—Ç–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ —Ç–µ–≥–∞–º":
                    #  "–ø–æ—à—É–∫ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –∑–∞ —Ç–µ–≥–∞–º–∏"
                    console_interface_note.tag_find_and_sort(note)

                case "file sort" | "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã" | "–≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏":
                    #  "—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≤—ñ–¥–µ–æ —Ç–∞ —ñ–Ω.)."
                    executing_command(user_input.lower())
                
                case "file extension show" | "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏—è" | "–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è":
                    #  "—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–∫—É–º–µ–Ω—Ç–∏, –≤—ñ–¥–µ–æ —Ç–∞ —ñ–Ω.)."
                    executing_command(user_input.lower())

                case "file extension add" | "–¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ" | "–¥–æ–¥–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª–∞":
                    #  "–¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"
                    executing_command(user_input.lower())

                case "file extension remove" | "—É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ" | "–≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª–∞":
                    #  "–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —ñ–∑ —Å–ø–∏—Å–∫—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"
                    executing_command(user_input.lower())

                case "quit" | "exit" | "q" | "–≤—ã—Ö–æ–¥" | "–≤" | "–¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ" | "–¥":
                    print(f"{bcolors.PINK}Good bye!{bcolors.RESET}\n")                   
                    save_to_file_contacts(file_name, book)
                    save_to_file_notes(note_name, note)
                    break
                
                case _:
                    if language == "ru":
                        commands_messages_error = RussianErrorCommandMessages()
                        error_messages_list = commands_messages_error.gets_error_command_messages()
                    elif language == "en":
                        commands_messages_error = EnglishErrorCommandMessages()
                        error_messages_list = commands_messages_error.gets_error_command_messages()
                    elif language == "ua":
                        commands_messages_error = UkrainianErrorCommandMessages()
                        error_messages_list = commands_messages_error.gets_error_command_messages()
                    
                    print(random.choice(error_messages_list))
                    if exit_flag:
                        timer_thread.cancel()
                        break
                            
    except FileNotFoundError:
        print(f"{bcolors.FAIL}\n‚ùå File not found error!{bcolors.RESET}")
        save_to_file_contacts(file_name, book)
        save_to_file_notes(note_name, note)
    except ValueError:
        print(f"{bcolors.FAIL}\n‚ùå Invalid value error!{bcolors.RESET}")
        save_to_file_contacts(file_name, book)
        save_to_file_notes(note_name, note)
    except KeyboardInterrupt:
        print(f"{bcolors.FAIL}\n‚ùå Keyboard interrupt error, EXITING!\n{bcolors.RESET}")
        save_to_file_contacts(file_name, book)
        save_to_file_notes(note_name, note)
    except Exception as ex:
        print(f"{bcolors.FAIL}\n‚ùå Unexpected error!{bcolors.RESET}")
        print(ex)
        save_to_file_contacts(file_name, book)
        save_to_file_notes(note_name, note)


if __name__ == "__main__":
    main()
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    